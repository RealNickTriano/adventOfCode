
# a through z have priorities 1 through 26.
# A through Z have priorities 27 through 52.

lettersDict = {
    "A": 27, "B": 28, "C": 29, "D": 30, "E": 31, 
    "F": 32, "G": 33, "H": 34, "I": 35, "J": 36, 
    "K": 37, "L": 38, "M": 39, "N": 40, "O": 41, 
    "P": 42, "Q": 43, "R": 44, "S": 45, "T": 46, 
    "U": 47, "V": 48, "W": 49, "X": 50, "Y": 51, 
    "Z": 52, 
    "a": 1, "b": 2, "c": 3, "d": 4, "e": 5, "f": 6, 
    "g": 7, "h": 8, "i": 9, "j": 10, "k": 11, "l": 12, 
    "m": 13, "n": 14, "o": 15, "p": 16, "q": 17, 
    "r": 18, "s": 19, "t": 20, "u": 21, "v": 22, 
    "w": 23, "x": 24, "y": 25, "z": 26
}

def printList(myList):
    for item in myList:
        print(item)
    return

def readInput():
    with open('Day_3_input.txt', 'r') as f:
        read_data = f.read()
        rucksacks = read_data.split('\n')
        print(rucksacks)
        
    return rucksacks

def FindErrors(rucksack):
    error = 0
    compartmentSize = len(rucksack) // 2
    firstHalf = rucksack[:compartmentSize]
    secondHalf = rucksack[compartmentSize:]
    for item in firstHalf:
        if item in secondHalf:
            error = lettersDict[item]
            return error

def FindBadges(group):
    badge = 0
    for item in group[0]:
        if item in group[1]:
            if item in group[2]:
                badge = lettersDict[item]
                return badge         
    
def SolvePart2():
    rucksacks = readInput()
    groups = []
    for i in range(0, len(rucksacks), 3):
        groups.append(rucksacks[i:i+3])
    print('groups', groups)
    badges = list(map(lambda x: FindBadges(x), groups))
    print(sum(badges))
    return

def main():
    rucksacks = readInput()
    errors = list(map(lambda x: FindErrors(x), rucksacks))
    print(sum(errors))
    SolvePart2()
    return
    
if __name__ == "__main__":
    main()